//
//  gaussian_points.h
//  DSC_segment_probability
//
//  Created by Tuan Nguyen Trung on 23/02/2018.
//  Copyright Â© 2018 Asger Nyman Christiansen. All rights reserved.
//

#ifndef gaussian_points_h
#define gaussian_points_h

#include <vector>

// Gaussian quadrature formulas for triangles

struct gpoint{
    double weight;
    vector<double> coord;
};

class gaussian_points
{
    gaussian_points(){
        m_container = {
            {// 1
                { 1, {0.333333, 0.333333, 0.333333}}
            },
            {// 3 points
                { 0.333333, {0.166660, 0.166660, 0.666660}},
                { 0.333333, {0.166660, 0.666660, 0.166660}},
                { 0.333333, {0.666660, 0.166660, 0.166660}}
            },
            { // 4 points
                { -0.562500, {0.333330, 0.333330, 0.333330}},
                { 0.520833, {0.200000, 0.200000, 0.600000}},
                { 0.520833, {0.200000, 0.600000, 0.200000}},
                { 0.520833, {0.600000, 0.200000, 0.200000}}
            },
            { // 6 points
                { 0.109952, {0.091570, 0.091570, 0.816840}},
                { 0.109952, {0.091570, 0.816840, 0.091570}},
                { 0.109952, {0.816840, 0.091570, 0.091570}},
                { 0.223382, {0.108100, 0.445940, 0.445940}},
                { 0.223382, {0.445940, 0.108100, 0.445940}},
                { 0.223382, {0.445940, 0.445940, 0.108100}}
            },
            {//7 points
                { 0.125939, {0.101280, 0.101280, 0.797420}},
                { 0.125939, {0.101280, 0.797420, 0.101280}},
                { 0.125939, {0.797420, 0.101280, 0.101280}},
                { 0.132394, {0.059710, 0.470140, 0.470140}},
                { 0.132394, {0.470140, 0.059710, 0.470140}},
                { 0.132394, {0.470140, 0.470140, 0.059710}},
                { 0.225000, {0.333330, 0.333330, 0.333330}}
            },
            {// 9 points
                { 0.063691, {0.037470, 0.165400, 0.797100}},
                { 0.063691, {0.037470, 0.797100, 0.165400}},
                { 0.063691, {0.165400, 0.037470, 0.797100}},
                { 0.063691, {0.165400, 0.797100, 0.037470}},
                { 0.063691, {0.797100, 0.037470, 0.165400}},
                { 0.063691, {0.797100, 0.165400, 0.037470}},
                { 0.205951, {0.124940, 0.437520, 0.437520}},
                { 0.205951, {0.437520, 0.124940, 0.437520}},
                { 0.205951, {0.437520, 0.437520, 0.124940}}
            },
            {// 12 points
                { 0.050840, {0.063080, 0.063080, 0.873820}},
                { 0.050840, {0.063080, 0.873820, 0.063080}},
                { 0.050840, {0.873820, 0.063080, 0.063080}},
                { 0.082850, {0.053140, 0.310350, 0.636500}},
                { 0.082850, {0.053140, 0.636500, 0.310350}},
                { 0.082850, {0.310350, 0.053140, 0.636500}},
                { 0.082850, {0.310350, 0.636500, 0.053140}},
                { 0.082850, {0.636500, 0.053140, 0.310350}},
                { 0.082850, {0.636500, 0.310350, 0.053140}},
                { 0.116780, {0.249280, 0.249280, 0.501420}},
                { 0.116780, {0.249280, 0.501420, 0.249280}},
                { 0.116780, {0.501420, 0.249280, 0.249280}}
            }
        };
    };
    ~gaussian_points(){};
    
    std::vector<std::vector<gpoint>> m_container;
    
    static gaussian_points * get_instance()
    {
        static gaussian_points instance;
        return &instance;
    }
public:
    static std::vector<gpoint> const & get_point(int res){
        return get_instance()->m_container[res];
    }
    
    static std::vector<gpoint> const get_point(double area){
        static vector<double> thres = {6, 10, 20, 30, 50, 80, 999999};
        int res = (int)(std::upper_bound(thres.begin(), thres.end(), area) - thres.begin());
        return get_instance()->m_container[res];
    }
};

#endif /* gaussian_points_h */
